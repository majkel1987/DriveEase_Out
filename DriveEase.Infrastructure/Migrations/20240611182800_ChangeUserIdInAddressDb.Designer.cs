// <auto-generated />
using System;
using DriveEase.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DriveEase.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240611182800_ChangeUserIdInAddressDb")]
    partial class ChangeUserIdInAddressDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DriveEase.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            ClientId = 1,
                            Country = "USA",
                            PostalCode = "10-001",
                            Street = "Main Street 1"
                        },
                        new
                        {
                            Id = 2,
                            City = "Berlin",
                            ClientId = 2,
                            Country = "Germany",
                            PostalCode = "90-001",
                            Street = "Broadway 2"
                        },
                        new
                        {
                            Id = 3,
                            City = "Los Angeles",
                            ClientId = 3,
                            Country = "USA",
                            PostalCode = "90-001",
                            Street = "Sunset Boulevard 3"
                        },
                        new
                        {
                            Id = 4,
                            City = "Warsaw",
                            ClientId = 4,
                            Country = "Poland",
                            PostalCode = "90-001",
                            Street = "Hollywood Boulevard 4"
                        });
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CarReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Engine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InsurancePolicyNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LocationGPS")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LogoURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Mileage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Power")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("VinNumber")
                        .IsUnique();

                    b.ToTable("Cars", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddDate = new DateTime(2023, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Audi",
                            CarReviewDate = new DateTime(2025, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Black",
                            Engine = "3.0 TDI",
                            Features = "[\"Leather seats\",\"Navigation\",\"Parking sensors\"]",
                            FuelType = 1,
                            ImageURL = "content/images/audi-q7.jpg",
                            InsurancePolicyNumber = "123456789",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "WW 12345",
                            LogoURL = "content/images/Audi.PNG",
                            Mileage = "73621",
                            Model = "Q7",
                            Power = "300",
                            Status = 0,
                            Transmission = "Automatic",
                            VinNumber = "1HGBH41JXMN109186",
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            AddDate = new DateTime(2024, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "BMW",
                            CarReviewDate = new DateTime(2026, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "White",
                            Engine = "2.0 TDI",
                            Features = "[\"Air Conditioning\",\"ABS\",\"Rain sensors\"]",
                            FuelType = 0,
                            ImageURL = "content/images/bmw-series-7.jpg",
                            InsurancePolicyNumber = "987654321",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "WH 54321",
                            LogoURL = "content/images/BMW.PNG",
                            Mileage = "3211",
                            Model = "Series 7",
                            Power = "340",
                            Status = 0,
                            Transmission = "Automatic",
                            VinNumber = "1HGBH41JXMN109187",
                            Year = 2024
                        },
                        new
                        {
                            Id = 3,
                            AddDate = new DateTime(2021, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Mercedes",
                            CarReviewDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Silver",
                            Engine = "2.5 TDI",
                            Features = "[\"Parking camera\",\"Heated seats\",\"Cruise control\"]",
                            FuelType = 1,
                            ImageURL = "content/images/mercedes-s-class.jpg",
                            InsurancePolicyNumber = "AB234BS2342",
                            IsAvailable = false,
                            IsDeleted = false,
                            LicensePlate = "WX 982733",
                            LogoURL = "content/images/mercedes-logo.jpg",
                            Mileage = "21402",
                            Model = "S Class",
                            Power = "140",
                            Status = 1,
                            Transmission = "Automatic",
                            VinNumber = "1VWBH41JXMB109239",
                            Year = 2019
                        },
                        new
                        {
                            Id = 4,
                            AddDate = new DateTime(2018, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Volkswagen",
                            CarReviewDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Blue",
                            Engine = "1.9 TDI",
                            Features = "[\"Navigation\",\"Heated seats\",\"Cruise control\"]",
                            FuelType = 1,
                            ImageURL = "content/images/vw-golf-V.jpg",
                            InsurancePolicyNumber = "XY234BS2452DS",
                            IsAvailable = false,
                            IsDeleted = false,
                            LicensePlate = "WH 50230",
                            LogoURL = "content/images/VW.PNG",
                            Mileage = "123456",
                            Model = "Golf V",
                            Power = "120",
                            Status = 2,
                            Transmission = "Manual",
                            VinNumber = "VVWBH41JXMB109523",
                            Year = 2008
                        },
                        new
                        {
                            Id = 5,
                            AddDate = new DateTime(2015, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Toyota",
                            CarReviewDate = new DateTime(2024, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Red",
                            Engine = "1.4 TSI",
                            Features = "[\"Parking camera\",\"ABS\",\"Rain sensors\"]",
                            FuelType = 0,
                            ImageURL = "content/images/toyota-yaris.jpg",
                            InsurancePolicyNumber = "ZZ234BS2452776U",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "SK 839032",
                            LogoURL = "content/images/toyota.png",
                            Mileage = "65432",
                            Model = "Yaris",
                            Power = "80",
                            Status = 0,
                            Transmission = "Manual",
                            VinNumber = "TOYBH41JXMB109633",
                            Year = 2015
                        },
                        new
                        {
                            Id = 6,
                            AddDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Ford",
                            CarReviewDate = new DateTime(2025, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Yellow",
                            Engine = "5.0 V8",
                            Features = "[\"Leather seats\",\"Parking camera\",\"ESP\"]",
                            FuelType = 0,
                            ImageURL = "content/images/ford-mustang.jpg",
                            InsurancePolicyNumber = "AA234BS24526SA",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LBI 50EK",
                            LogoURL = "content/images/Ford.PNG",
                            Mileage = "222332",
                            Model = "Mustang",
                            Power = "280",
                            Status = 0,
                            Transmission = "Manual",
                            VinNumber = "FORDH41JXMB109544",
                            Year = 2018
                        },
                        new
                        {
                            Id = 7,
                            AddDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Nissan",
                            CarReviewDate = new DateTime(2024, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Green",
                            Engine = "Electric",
                            Features = "[\"Parking camera\",\"ABS\",\"Rain sensors\"]",
                            FuelType = 2,
                            ImageURL = "content/images/nissan-leaf.jpg",
                            InsurancePolicyNumber = "BB234BS2452DSD",
                            IsAvailable = false,
                            IsDeleted = false,
                            LicensePlate = "KR 90332",
                            LogoURL = "content/images/Ford.PNG",
                            Mileage = "188222",
                            Model = "Leaf",
                            Power = "100",
                            Status = 3,
                            Transmission = "Manual",
                            VinNumber = "NISANH41JXMB109555",
                            Year = 2010
                        },
                        new
                        {
                            Id = 8,
                            AddDate = new DateTime(2023, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Hyundai",
                            CarReviewDate = new DateTime(2026, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Black",
                            Engine = "2.0 TFSI",
                            Features = "[\"ESP\",\"ABS\",\"Rain sensors\"]",
                            FuelType = 0,
                            ImageURL = "content/images/hyundai_tucson_suv_ce11.jpg",
                            InsurancePolicyNumber = "CC234BS245AS42",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LBI 12345",
                            LogoURL = "content/images/Hyundai.PNG",
                            Mileage = "5623",
                            Model = "Tuscon",
                            Power = "160",
                            Status = 0,
                            Transmission = "Automatic",
                            VinNumber = "HYUNH41JXMB109566",
                            Year = 2023
                        },
                        new
                        {
                            Id = 9,
                            AddDate = new DateTime(2023, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Kia",
                            CarReviewDate = new DateTime(2026, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "White",
                            Engine = "1.6 TDI",
                            Features = "[\"Parking camera\",\"ABS\",\"Rain sensors\"]",
                            FuelType = 1,
                            ImageURL = "content/images/kia-proceed-gt.jpg",
                            InsurancePolicyNumber = "DD234BS2452DS",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "WB 39883",
                            LogoURL = "content/images/Hyundai.PNG",
                            Mileage = "1234",
                            Model = "ProCeed",
                            Power = "190",
                            Status = 0,
                            Transmission = "Manual",
                            VinNumber = "KIAH41JXMB109577",
                            Year = 2023
                        },
                        new
                        {
                            Id = 10,
                            AddDate = new DateTime(2021, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brand = "Tesla",
                            CarReviewDate = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Green",
                            Engine = "Electric",
                            Features = "[\"Parking camera\",\"ABS\",\"Rain sensors\"]",
                            FuelType = 2,
                            ImageURL = "content/images/tesla-model-S.jpg",
                            InsurancePolicyNumber = "TE234BS24529876",
                            IsAvailable = false,
                            IsDeleted = false,
                            LicensePlate = "KR 6721",
                            LogoURL = "content/images/Tesla.PNG",
                            Mileage = "11222",
                            Model = "Model S",
                            Power = "90",
                            Status = 1,
                            Transmission = "Manual",
                            VinNumber = "TESANH41JXMB109SLA",
                            Year = 2018
                        });
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivateAccount")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("NipNumber")
                        .HasMaxLength(10)
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverLicenseNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "123456789",
                            Email = "john.doe@icloud.com",
                            FirstName = "John",
                            IsDeleted = false,
                            IsPrivateAccount = true,
                            LastName = "Doe",
                            NipNumber = 0L,
                            Notes = "Regular customer",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Doe & Partners",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "987654321",
                            Email = "jane.doe@onet.pl",
                            FirstName = "Jane",
                            IsDeleted = false,
                            IsPrivateAccount = false,
                            LastName = "Doe",
                            NipNumber = 1234567890L,
                            Notes = "Business customer",
                            PhoneNumber = "987654321"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "ABD2241723",
                            Email = "a.smith@wp.pl",
                            FirstName = "Alice",
                            IsDeleted = false,
                            IsPrivateAccount = true,
                            LastName = "Smith",
                            NipNumber = 0L,
                            Notes = "New regular customer",
                            PhoneNumber = "222565321"
                        },
                        new
                        {
                            Id = 4,
                            CompanyName = "Smith & Co.",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "VAN123456",
                            Email = "vance.b@gmail.com",
                            FirstName = "Bob",
                            IsDeleted = false,
                            IsPrivateAccount = false,
                            LastName = "Vance",
                            NipNumber = 9876543210L,
                            Notes = "Business customer",
                            PhoneNumber = "553268145"
                        });
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DayOfDismissal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayOfEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MethodOfPayment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("Rentals", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.RentalRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<decimal>("CleaningFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FuelFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("RentalRates", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RentalId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.ServiceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ServiceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceProvider")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ServiceDate");

                    b.ToTable("ServiceHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Cost = 150m,
                            Description = "Change oil and filter",
                            IsDeleted = false,
                            IsFinished = true,
                            Notes = "Car is running smoothly",
                            ServiceDate = new DateTime(2023, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceEndDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceProvider = "Toyo",
                            ServiceType = "Oil Change",
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            Cost = 200m,
                            Description = "Rotate tires",
                            IsDeleted = false,
                            IsFinished = true,
                            Notes = "Tires are wearing evenly",
                            ServiceDate = new DateTime(2023, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceEndDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceProvider = "Mech-1",
                            ServiceType = "Tire Rotation",
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            Cost = 1000m,
                            Description = "Inspect brakes",
                            IsDeleted = false,
                            IsFinished = false,
                            Notes = "Brakes are in bad condition",
                            ServiceDate = new DateTime(2022, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceEndDate = new DateTime(2022, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceProvider = "Jiffy Lube",
                            ServiceType = "Brake Inspection",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CarId = 3,
                            Cost = 300m,
                            Description = "Recharge AC",
                            IsDeleted = false,
                            IsFinished = false,
                            Notes = "AC is working properly",
                            ServiceDate = new DateTime(2022, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceProvider = "Cooling Experts",
                            ServiceType = "Air conditioninig service",
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            CarId = 2,
                            Cost = 500m,
                            Description = "Inspect engine",
                            IsDeleted = false,
                            IsFinished = true,
                            Notes = "Engine is in good condition",
                            ServiceDate = new DateTime(2024, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceEndDate = new DateTime(2024, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceProvider = "Auto Care",
                            ServiceType = "Engine Inspection",
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            CarId = 2,
                            Cost = 1200m,
                            Description = "Inspect vehicle",
                            IsDeleted = false,
                            IsFinished = true,
                            Notes = "Service cancelled",
                            ServiceDate = new DateTime(2024, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceEndDate = new DateTime(2024, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceProvider = "Auto Care",
                            ServiceType = "Inspection",
                            Status = 3
                        },
                        new
                        {
                            Id = 7,
                            CarId = 2,
                            Cost = 1200m,
                            Description = "Inspect vehicle",
                            IsDeleted = false,
                            IsFinished = true,
                            Notes = "Service cancelled",
                            ServiceDate = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceEndDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceProvider = "Auto Care",
                            ServiceType = "Inspection",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "378BB303-1042-436F-9A0D-808F9BE41B09",
                            ConcurrencyStamp = "378BB303-1042-436F-9A0D-808F9BE41B08",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "99C16AF4-43E2-4C22-9972-847D990F4228",
                            ConcurrencyStamp = "99C16AF4-43E2-4C22-9972-847D990F4227",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "F64DDDCB-E4FC-4EFA-92C3-81C1AC808927",
                            ConcurrencyStamp = "F64DDDCB-E4FC-4EFA-92C3-81C1AC808926",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "F0B78148-B1FF-4E40-A791-1DDCC28E90F6",
                            ConcurrencyStamp = "F0B78148-B1FF-4E40-A791-1DDCC28E90F5",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Address", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.Client", "Client")
                        .WithOne("Address")
                        .HasForeignKey("DriveEase.Domain.Entities.Address", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveEase.Domain.Entities.AppUser", "AppUser")
                        .WithOne("Address")
                        .HasForeignKey("DriveEase.Domain.Entities.Address", "UserId");

                    b.Navigation("AppUser");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Client", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Employee", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Notification", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Rental", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.Car", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DriveEase.Domain.Entities.Client", "Client")
                        .WithMany("Rentals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DriveEase.Domain.Entities.Invoice", "Invoice")
                        .WithOne("Rental")
                        .HasForeignKey("DriveEase.Domain.Entities.Rental", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.RentalRate", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.Car", "Car")
                        .WithMany("RentalRates")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DriveEase.Domain.Entities.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Review", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.Client", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DriveEase.Domain.Entities.Rental", "Rental")
                        .WithMany("Reviews")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.ServiceHistory", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.Car", "Car")
                        .WithMany("ServiceHistory")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveEase.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DriveEase.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Clients");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Car", b =>
                {
                    b.Navigation("RentalRates");

                    b.Navigation("Rentals");

                    b.Navigation("Reservations");

                    b.Navigation("ServiceHistory");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Client", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Invoices");

                    b.Navigation("Notifications");

                    b.Navigation("Rentals");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Rental");
                });

            modelBuilder.Entity("DriveEase.Domain.Entities.Rental", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
