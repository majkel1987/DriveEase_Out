@page "/clients"
@using DriveEase.Shared.Clients.Dtos
@inject IClientHttpRepository ClientHttpRepository
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject DialogService DialogService
@rendermode InteractiveAuto
@attribute [StreamRendering]

<RadzenComponents />

<PageTitle>Clients</PageTitle>

@if (_clients == null)
{
	<Spinner />
}
else if (_clients.Count() == 0)
{
	<p>No clients found!</p>
}
else
{
	<section class="container my-3">
		<header class="d-flex justify-content-between align-items-center mb-2">
			<div>
				<h6 class="text-muted">Clients</h6>
				<h3>Clients list</h3>
			</div>
		</header>

		<div class="mb-3">
			<RadzenButton Text="Add new Client" Icon="add" IconPosition="IconPosition.Left"
						  ButtonStyle="ButtonStyle.Primary" Click="@NavigateToAddNewClient" />
		</div>

		<RadzenDataGrid PageSize="8" AllowPaging="true" ShowPagingSummary="true"
						Data="@_clients" TItem="ClientDto" ColumnWidth="80px">
			<Columns>
				<RadzenDataGridColumn TItem="ClientDto" Property="FirstName" Title="First Name" />
				<RadzenDataGridColumn TItem="ClientDto" Property="LastName" Title="Last Name" />
				<RadzenDataGridColumn TItem="ClientDto" Property="Email" Title="Email" />
				<RadzenDataGridColumn TItem="ClientDto" Property="PhoneNumber" Title="PhoneNumber" />
				<RadzenDataGridColumn TItem="ClientDto" Title="Type">
					<Template Context="client">
						@if (client.IsPrivateAccount)
						{
							<RadzenBadge Text="Private" Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" />
						}
						else
						{
							<RadzenBadge Text="Buissness" Shade="Shade.Light" BadgeStyle="BadgeStyle.Danger" />
						}
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="ClientDto" Title="Actions">
					<Template Context="client">
						<RadzenButton Icon="privacy_tip" ButtonStyle="ButtonStyle.Info" Click="@(args => GoToClientDetails(client.Id))"
									  Size="ButtonSize.Small" />
						<RadzenButton Icon="build" ButtonStyle="ButtonStyle.Warning" Click="@(args => GoToEditClient(client.Id))"
									  Size="ButtonSize.Small" />
						<RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(args => ConfirmDeleteClient(client.Id))"
									  Size="ButtonSize.Small" />
					</Template>
				</RadzenDataGridColumn>
			</Columns>
		</RadzenDataGrid>
	</section>
}

@code {
	private IEnumerable<ClientDto> _clients;

	protected override async Task OnInitializedAsync()
	{
		await LoadClients();
	}

	private void NavigateToAddNewClient()
	{
		NavigationManager.NavigateTo($"/addnewclient");
	}

	private void GoToClientDetails(int id)
	{
		NavigationManager.NavigateTo($"/client/{id}");
	}

	private void GoToEditClient(int id)
	{
		NavigationManager.NavigateTo($"/editclient/{id}");
	}

	private async Task ConfirmDeleteClient(int id)
	{
		var confirmationResult = await DialogService.Confirm("Are you sure you want to delete this Client?", "Delete Client",
									new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

		if (confirmationResult == true)
		{
			await DeleteClient(id);
		}
	}

	private async Task DeleteClient(int id)
	{
		try
		{
			await ClientHttpRepository.DeleteClient(id);
			NotificationService.Notify(NotificationSeverity.Success, "Success", "Client deleted successfully!");
			await LoadClients();
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"An error occurred while deleting Client: {ex.Message}");
		}
	}

	private async Task LoadClients()
	{
		var clients = await ClientHttpRepository.GetClients();
		_clients = clients.Where(x => x.IsDeleted == false);
		StateHasChanged();
	}
}
